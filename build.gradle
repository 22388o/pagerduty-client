buildscript {
  configurations.all {
    resolutionStrategy {
      cacheDynamicVersionsFor 3, 'minutes'
      cacheChangingModulesFor 3, 'minutes'
    }
  }
  repositories {
    maven { url = 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath "org.javamodularity:moduleplugin:+"
    classpath "pl.allegro.tech.build:axion-release-plugin:+"
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:+"
  }
}

ext {
  // Used by systems.comodal.pagerduty_event_json_iterator_adapter
  jsoniter = "2.1.+" // https://github.com/comodal/json-iterator/releases
}

apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
  tag.prefix = ''
  repository.pushTagsOnly = true
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'org.javamodularity.moduleplugin'
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.bintray'

  project.group = 'systems.comodal'
  project.version = scmVersion.version

  sourceCompatibility = JavaVersion.VERSION_12

  ext {
    desc = 'Pagerduty Event Client'
    bintrayOrg = 'comodal'
    bintrayRepo = 'libraries'
    vcsUrl = 'https://github.com/comodal/pagerduty-client'
  }

  repositories {
    mavenCentral()
    jcenter()
    maven { url = 'https://dl.bintray.com/comodal/libraries' }
  }

  configurations.all {
    resolutionStrategy {
      cacheDynamicVersionsFor 15, 'minutes'
      cacheChangingModulesFor 15, 'minutes'
    }
  }

  dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
  }

  test {
    useJUnitPlatform()
    maxParallelForks = 4
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
      showStandardStreams true
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        groupId project.group
        artifactId project.name
        version = project.version
      }
    }
  }

  afterEvaluate {
    bintray {
      override = true
      user = project.hasProperty("bintrayUser") ? bintrayUser : System.getenv('BINTRAY_USER')
      key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
      publications = ['mavenJava']
      pkg {
        userOrg = project.bintrayOrg
        repo = project.bintrayRepo
        name = project.name
        desc = project.desc
        vcsUrl = project.vcsUrl
        websiteUrl = project.vcsUrl
        issueTrackerUrl = project.vcsUrl + '/issues'
        licenses = ["Apache-2.0"]
        publish = true
        version {
          name = project.version
          vcsTag = project.name + '-' + project.version
          released = new Date()
          gpg {
            sign = true
            passphrase = project.hasProperty("bintrayGPGPassphrase") ? bintrayGPGPassphrase : System.getenv('BINTRAY_GPG_PASSPHRASE')
          }
        }
      }
    }
  }
}
